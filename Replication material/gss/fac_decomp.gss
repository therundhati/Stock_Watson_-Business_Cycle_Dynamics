/*
    decomp.gss, 5/9/03, mww
    Compute factor decompositions using factor model
    unweighted VAR.
*/
new;
library pgraph;
graphset;
outwidth 200;
ofile="fac_decomp.out";  @ Output File Name @
iext="q50";            @ Data Extension -- input @
nfy=1950;              @ First Year @
nfp=1;                 @ First Period of Year @
nly=2002;              @ Last Year @
nlp=4;                 @ Last Period of Year @
nper=4;                       @ Number of Periods Per Year @
dpath="c:\\g7\\data\\";       @ Data Path @
missc=1.0e+032;        @ Missing Value Code in ASCII Files @
othlag=1;              @ Number of other lags in VAR @
ownlag=4;              @ number of own lags in VAR @
nem=1000;              @ Number of EM Reps -- first run @
nirf=7;                @ Number of Impulse Responses @

nord=100;              @ Number of Ordinates for spectral calculation @
nperl=6;               @ Lower cutoff for bandpass @
nperu=32;              @ Upper cutoff for bandpass @

smplvec = 
(1960.0~1983.99) |
(1984.0~2003);

small=1.0e-06;

dnobs=nper*(nly-nfy-1)+nlp+(nper+1-nfp);        @ - Number of Obs, data - @
calvec=seqa(nfy+(nfp-1)/nper,1/nper,dnobs);     @ -- Calendar Vector -- @

load path = ^dpath;

#include fcst.prc;
#include udatain.prc;
#include spmodh.prc;

cname=
"cn" $|
"fr" $|
"bd" $|
"it" $|
"jp" $|
"uk" $|
"us" ;

ns=rows(cname);  @ Number of Series @

clabel=
"Canada" $|
"France" $|
"Germany" $|
"Italy" $|
"Japan" $|
"U.K." $|
"U.S." ;

let hvec[7,2] = 
1 1
1 1
1 1
1 1
1 1 
1 1
1 0;

nf=cols(hvec);   @ Number of Factors @

output file = ^ofile reset; output on;
outwidth 200;
format /ro 16,6;

@ .. Read in Series @
s=miss(zeros(dnobs,ns),0);
imark=1; do while imark <= ns;
 ystr="" $+ cname[imark,1] $+ "gdppc_sm." $+ iext;
 ydata=udatain(ystr,missc,dnobs);
 ytran=ydata;    @ Note ... data are already in first differences (detrended) @ 
 s[.,imark]=ytran;
imark=imark+1; endo;

/* Carry Out Analysis Period by Period */
                            

@ Misc Matrices used in calculations @
maxlag=maxc(ownlag|othlag);
nreg=ns*(ownlag+(ns-1)*othlag);  @ Number of Regressors @ 
nregvec=(ownlag+(ns-1)*othlag)*ones(ns,1);  @ Vector with number of regressors in each equation@
step=pi/nord;
wvec=seqa(step,step,nord); 
nfl=2*pi/nperl;
nfu=2*pi/nperu;
ibc =(wvec .<= nfl).*(wvec .>= nfu);


ni=1; do while ni <= rows(smplvec);
 "Sample Period";; smplvec[ni,.];
 ismpl = (calvec .>= smplvec[ni,1]-small) .* (calvec .<= smplvec[ni,2]-small);
 @ Matrix of Dependent Variables @
 yt=selif(s,ismpl);

 @ Construct X Matrix -- Using lags of other series ... unrestricted @
 xt=miss(zeros(dnobs,nreg),0);
 i=1; do while i <= ns;
  ii=(i-1)*(ownlag+(ns-1)*othlag);
  j=1; do while j <= ownlag;
   xt[j+1:dnobs,ii+j]=s[1:dnobs-j,i];
  j=j+1; endo;
  ii=ii+ownlag;
  ik=1; do while ik <= ns;
   if ik ./= i;
    j=1; do while j <= othlag;
     xt[j+1:dnobs,ii+j]=s[1:dnobs-j,ik];
    j=j+1; endo;
    ii=ii+othlag;
   endif;
  ik=ik+1; endo;
 i=i+1; endo;
 xt=selif(xt,ismpl); 
 
 @ Check Number of Observations @
 tmp=packr(yt~xt);
 yt=tmp[.,1:ns];
 xt=tmp[.,ns+1:cols(tmp)];
 
 @ Construct GLS Estimates of Regression Coefficients @
  nt=rows(yt);  @ Number of time periods @
  ny=cols(yt);  @ Number of equations @
  nr=cols(xt);  @ Total Number of regressors @
  @ Step 1: Form y and x matrix for stacked system @
  y=vec(yt);
  x=zeros(nt*ny,nr);
  jj=0;
  i=1; do while i <= ny;
   ii=(i-1)*nt;
   x[ii+1:ii+nt,jj+1:jj+nregvec[i]]=xt[.,jj+1:jj+nregvec[i]];
   jj=jj+nregvec[i];
  i=i+1; endo;
  
  bols=invpd(x'x)*(x'y);
  e=y-x*bols;
  u=(reshape(e,ny,nt))';
  seps=u'u/nt;
  sepsinv=invpd(seps);
  q=sepsinv.*.eye(nt);
  bgls=(invpd(x'q*x))*(x'q*y);
  e=y-x*bgls;
  u=(reshape(e,ny,nt))';
  
  e=u;  @ Change notation for use in EM @
  ee=e'e;
  seps=(e'e)/(rows(e));
  seps_inv=invpd(seps);
  det_seps=det(seps);
  tmp=seps_inv*ee;
  un_lf=-0.5*(rows(e)*ln(det_seps) + sumc(diag(tmp))); @ Unrestricted log-likelihood @ 
  
  @ Initialize for EM @
    @ initial values @
    vuuvec = diag(seps)/sqrt(2);
    vuu=diagrv(eye(ns),vuuvec);
    lam=sqrt(vuuvec).*hvec;
    vff=eye(cols(hvec));
  
  @ EM Iterations @

  irep=1; do while irep <= nem;
   vee=lam*vff*lam' + vuu;
   vee_i=invpd(vee);
   det_vee=det(vee);
   if irep .== nem;
    tmp=vee_i*ee;
    lf=-0.5*(rows(e)*ln(det_vee) + sumc(diag(tmp)));
   endif;

   @ Regression Coefficients @

   psi=vff*lam'invpd(vee);
   vff_e=vff-psi*lam*vff;
   fhat=e*psi';
 
   @ Compute Sufficient statistics given e @
   ef=e'fhat;
   ff=fhat'fhat+vff_e*rows(fhat);
 
   @ Construct new estimate of lambda @
   i=1; do while i <= rows(hvec);
    nfm=sumc(hvec[i,.]');
    xxy=zeros(nfm,1);
    xx=zeros(nfm,nfm);
    jx=0;
    j=1; do while j <= cols(hvec);
     if hvec[i,j] .== 1;
      jx=jx+1;
      xxy[jx,1]=ef[i,j];
      kx=0;
      k=1; do while k <= cols(hvec);
       if hvec[i,k] .== 1;
        kx=kx+1;
        xx[jx,kx]=ff[j,k];
       endif;
      k=k+1; endo;
     endif;
    j=j+1; endo;
    lam_i=invpd(xx)*xxy;
    tmp=ee[i,i]-xxy'lam_i;
    vuu[i,i]=tmp/rows(e);
    jx=0;
    j=1; do while j <= cols(hvec);
     if hvec[i,j] .== 1;
      jx=jx+1;
      lam[i,j]=lam_i[jx];
     endif;
    j=j+1; endo;
   i=i+1; endo;
  irep=irep+1; endo;
  "Sample Period";;smplvec[ni,.];
  "Unrestricted Log Likelihood";;un_lf;
  "Restricted Log Likelihood";;lf;
  df_unr=(ns*(ns+1))/2;
  df_res=(sumc(sumc(hvec)) + ns);
  df=df_unr-df_res;
  "Degrees of Freedom";;df;
  lrstat=2*(un_lf-lf);
  pvalue=cdfchic(lrstat,df);
  "LR Stat and Pvalue";;lrstat;;pvalue;
  "Factor Loadings";
  lam;
  "Uniquess SD";
  (sqrt(diag(vuu)));
  "";"";
  
  @ ... Write in standard form ... 
        Each column shows regression coefficients for 1 equation    @
  beta=zeros(ns*maxlag,ns);
  nre=ownlag+(ns-1)*othlag;
  i=1; do while i <= ns;
   ii=(i-1)*nre;
   bcoef=bgls[ii+1:ii+nre];
   j=1; do while j <= ownlag;
    jj=(j-1)*ns;
    beta[jj+i,i]=bcoef[j];
   j=j+1; endo;
   ii=ownlag;
   j=1; do while j <= othlag;
    jj=(j-1)*ns;
    ik=0;
    k=1; do while k <= ns;
     if k ./= i;
      mm=ownlag+ik*othlag;
      beta[jj+k,i]=bcoef[mm+j];
      ik=ik+1;
     endif;
    k=k+1; endo;
   j=j+1; endo;
  i=i+1; endo;  
  
 @ ---- Calculate Companion Matrix ---- @
 b=beta';
 comp=zeros(cols(b),cols(b));
 comp[1:rows(b),.]=b;
 if cols(b) .> rows(b);
  comp[rows(b)+1:rows(comp),1:cols(comp)-rows(b)]=eye(cols(comp)-rows(b));
 endif;
 @ -- Write Model in SS Form --
     y(t) = Q*z(t)
     z(t) = M*z(t-1) + G*u(t)
     var(u(t)) = I
 @
 m=comp;
 q=zeros(ns,rows(m));
 q[1:ns,1:ns]=eye(ns);
 g=zeros(cols(m),nf+ns);
 g[1:ns,1:nf]=lam;
 g[1:ns,nf+1:nf+ns]=sqrt(vuu);


 @ -- Compute Impulse Response Functions --- @
 i=1; do while i <= ns+nf;
  z=zeros(rows(m),1);
  eta=zeros(ns+nf,1);
  eta[i]=1;
  z=g*eta;
  y=q*z;
  irf=y';
  j=1; do while j <= nirf;
   z=m*z;
   y=q*z;
   irf=irf|y';
  j=j+1; endo;
  str_irf="irf" $+ ftocv(ni,1,0) $+ ftocv(i,2,0);
  yy=varput(irf,str_irf);
 i=i+1; endo;

 @ Calculate Spectral Density Matrix of this VAR --- @ 
   @ .. All Shocks ... Total Spectrum ... @
   tmp=ns*(ns+1)/2;
   svlev=zeros(tmp,nord);
   svdif=zeros(tmp,nord);
   j=1; do while j<= nord;
    w=wvec[j];
    spdif=spmodh(q,m,g,w);  @ Spectrum of VAR @
    @ Convert to Spectrum of Levels @
    let im = 0+1i;
    z=exp(-w*im);az=1-z;  @ az is first difference filter @
    azi=inv(az);          @ azi is the accumulation operator @
    a=azi*azi';
    splev=a*spdif;
    svlev[.,j]=vech(splev);
    svdif[.,j]=vech(spdif);
   j=j+1; endo;
   str = "svlevtot_" $+ ftocv(ni,1,0);
   yy=varput(svlev,str);
   str = "svdiftot_" $+ ftocv(ni,1,0);
   yy=varput(svdif,str);    
         
   @ ... Shock by Shock ... @
   ishock=1; do while ishock <= cols(g);
    g1=g[.,ishock];
    tmp=ns*(ns+1)/2;
    svlev=zeros(tmp,nord);
    j=1; do while j<= nord;
     w=wvec[j];
     spdif=spmodh(q,m,g1,w);  @ Spectrum of VAR @
     @ Convert to Spectrum of Levels @
     let im = 0+1i;
     z=exp(-w*im);az=1-z;  @ az is first difference filter @
     azi=inv(az);          @ azi is the accumulation operator @
     a=azi*azi';
     splev=a*spdif;
     svlev[.,j]=vech(splev);
     svdif[.,j]=vech(spdif);     
    j=j+1; endo;
    
    str="svlev_" $+ ftocv(ni,1,0) $+ ftocv(ishock,2,0);
    yy=varput(svlev,str);
    str="svdif_" $+ ftocv(ni,1,0) $+ ftocv(ishock,2,0);
    yy=varput(svdif,str);
   ishock=ishock+1; endo;  
  
ni=ni+1; endo;


@ ... Print summary of results -- @

@ -- Compute Variance and Variance Decomp by Country -- @
i=1; do while i <= ns;
 j=1; do while j <= nf+ns;
   n1="irf1" $+ ftocv(j,2,0);
   irf1=varget(n1);
   irf1=cumsumc(irf1);
   n2="irf2" $+ ftocv(j,2,0);
   irf2=varget(n2);
   irf2=cumsumc(irf2);
   if j .== 1;
    v1=irf1[.,i];
    v2=irf2[.,i];
   else;
    v1=v1~irf1[.,i];
    v2=v2~irf2[.,i];
   endif;
  j=j+1; endo;
  @ convert to accumaled variances @
  var1=cumsumc((v1.^2));
  var2=cumsumc((v2.^2));
  tvar1=sumc(var1');
  tvar2=sumc(var2');
  vd1=sqrt(tvar1)~(var1./tvar1);
  vd2=sqrt(tvar2)~(var2./tvar2);
  strvd1="vd1_" $+ cname[i];
  yy=varput(vd1,strvd1);
  strvd2="vd2_" $+ cname[i];
  yy=varput(vd2,strvd2);
i=i+1; endo;

t=seqa(1,1,nirf+1);
tprint=1|2|4|8;      @ VD to Print @

@ -- Print Results -- @
i=1; do while i <= ns;
  strvd1="vd1_" $+ cname[i];
  vd1=varget(strvd1);
  strvd2="vd2_" $+ cname[i];
  vd2=varget(strvd2);
  clabel[i];;" ,";;
  ti=1; do while ti <= rows(tprint);
   if ti ./= 1;"     ,";; endif;
   format /rd 5,0;
   tprint[ti];;" ,";;
   isti= (t.==tprint[ti]);
   vd1t=selif(vd1,isti);
   vd2t=selif(vd2,isti);
   fac1=sumc(vd1t[1,2:1+nf]');
   own1=vd1t[1,1+nf+i];
   tot1=vd1t[1,1];
   spill1=1-fac1-own1;
   fac2=sumc(vd2t[1,2:1+nf]');
   own2=vd2t[1,1+nf+i];
   tot2=vd2t[1,1];
   spill2=1-fac2-own2;
   format /rd 6,2;
   (4/(tprint[ti]))*100*tot1;;" ,";;
   fac1;;" ,";;  
   spill1;;" ,";; 
   own1;;" ,";;   
   (4/(tprint[ti]))*100*tot2;;" ,";;
   fac2;;" ,";;  
   spill2;;" ,";; 
   own2;
  ti=ti+1; endo;
i=i+1; endo;
"";"";
@ .. Spectral Calculations ... @
spdcmp1=zeros(ns,4);
spdcmp2=zeros(ns,4);

i=1; do while i <= ns;
  ii=i*(i+1)/2;
  str = "svlevtot_1";
  slevtot=varget(str);
  rsvlev=real(slevtot');        @ Real part of spectrum @  
  rbptot=selif(rsvlev,ibc);    @ Over Relevant Frequencies @
  spectot1=sumc(rbptot[.,ii])/nord;
  spdcmp1[i,1]=sqrt(spectot1);
  str = "svlevtot_2";
  slevtot=varget(str);
  rsvlev=real(slevtot');        @ Real part of spectrum @  
  rbptot=selif(rsvlev,ibc);      @ Over Relevant Frequencies @
  spectot2=sumc(rbptot[.,ii])/nord;  
  spdcmp2[i,1]=sqrt(spectot2);  
  
  @ .. Fractions ... @
  @ .. factors ... @
  tmp1=0;
  tmp2=0;
  fi=1; do while fi <= nf;
   str = "svlev_1" $+ ftocv(fi,2,0);
   slev=varget(str);
   rsv=real(slev');        @ Real part of spectrum @  
   rbp=selif(rsv,ibc);      @ Over Relevant Frequencies @
   tmp1=tmp1 + sumc(rbp[.,ii]);
   str = "svlev_2" $+ ftocv(fi,2,0);
   slev=varget(str);
   rsv=real(slev');        @ Real part of spectrum @  
   rbp=selif(rsv,ibc);      @ Over Relevant Frequencies @
   tmp2=tmp2 + sumc(rbp[.,ii]);
  fi=fi+1; endo;
  fspec1=tmp1/nord;
  fspec2=tmp2/nord;  
  spdcmp1[i,2]=fspec1/spectot1;
  spdcmp2[i,2]=fspec2/spectot2;
  

  @ .. uniqueness .. @  
   str = "svlev_1" $+ ftocv(nf+i,2,0);
   slev=varget(str);
   rsv=real(slev');        @ Real part of spectrum @  
   rbp=selif(rsv,ibc);      @ Over Relevant Frequencies @
   tmp1=sumc(rbp[.,ii]);
   str = "svlev_2" $+ ftocv(nf+i,2,0);
   slev=varget(str);
   rsv=real(slev');        @ Real part of spectrum @  
   rbp=selif(rsv,ibc);      @ Over Relevant Frequencies @
   tmp2=sumc(rbp[.,ii]);
   uspec1=tmp1/nord;
   uspec2=tmp2/nord;  
   spdcmp1[i,4]=uspec1/spectot1;
   spdcmp2[i,4]=uspec2/spectot2;
   
   @ .. spillover .. @
   spdcmp1[i,3]=1-spdcmp1[i,2]-spdcmp1[i,4];
   spdcmp2[i,3]=1-spdcmp2[i,2]-spdcmp2[i,4];
i=i+1; endo;   

@ -- Print Results -- @
i=1; do while i <= ns;
 clabel[i];;" ,";;
 format /rd 5,2;
 100*spdcmp1[i,1];;" ,";;
 spdcmp1[i,2];;" ,";;  
 spdcmp1[i,3];;" ,";;  
 spdcmp1[i,4];;" ,";;  
 100*spdcmp2[i,1];;" ,";;
 spdcmp2[i,2];;" ,";;  
 spdcmp2[i,3];;" ,";;  
 spdcmp2[i,4]; 
i=i+1; endo;  
 

output off;
