/*
   fac_decomp_exp.gss, 5/9/03, mww
    Compute factor decompositions using factor model
    unweighted VAR.  Exponential rolling regression
*/
new;
library pgraph;
graphset;
outwidth 200;
ofile="fac_decomp_exp.out";  @ Output File Name @
iext="q50";            @ Data Extension -- input @
nfy=1950;              @ First Year @
nfp=1;                 @ First Period of Year @
nly=2002;              @ Last Year @
nlp=4;                 @ Last Period of Year @
nper=4;                       @ Number of Periods Per Year @
dpath="c:\\g7\\data\\";       @ Data Path @
savpath="c:\\g7\\gss\\fmt\\"; @ Save Path @
missc=1.0e+032;        @ Missing Value Code in ASCII Files @
othlag=1;              @ Number of other lags in VAR @
ownlag=4;              @ number of own lags in VAR @
nem1=1000;             @ Number of EM Reps -- first run @
nem2=400;              @ Number of EM Reps -- other runs @

nord=100;              @ Number of Ordinates for spectral calculation @
disc=0.97;             @ discount factor @

efy=1965;              @ First Year for estimation @
efp=1;                 @ First Period for estimation @
ely=1995;              @ Last Year for estimation @
elp=4;                 @ Last Period for estimation @

small=1.0e-06;

dnobs=nper*(nly-nfy-1)+nlp+(nper+1-nfp);        @ - Number of Obs, data - @
calvec=seqa(nfy+(nfp-1)/nper,1/nper,dnobs);     @ -- Calendar Vector -- @
nfirst=nper*(efy-nfy-1)+efp+(nper+1-nfp);       @ -- index of first estimation period -- @
nlast=nper*(ely-nfy-1)+elp+(nper+1-nfp);        @ -- index of last estimation period -- @

load path = ^dpath;

#include fcst.prc;
#include udatain.prc;
#include spmodh.prc;

cname=
"cn" $|
"fr" $|
"bd" $|
"it" $|
"jp" $|
"uk" $|
"us" ;

ns=rows(cname);  @ Number of Series @

clabel=
"Canada" $|
"France" $|
"Germany" $|
"Italy" $|
"Japan" $|
"U.K." $|
"U.S." ;

let hvec[7,2] = 
1 1
1 1
1 1
1 1
1 1 
1 1
1 0;

nf=cols(hvec);   @ Number of Factors @

output file = ^ofile reset; output on;
outwidth 200;
format /ro 16,6;

@ .. Read in Series @
s=miss(zeros(dnobs,ns),0);
imark=1; do while imark <= ns;
 ystr="" $+ cname[imark,1] $+ "gdppc_sm." $+ iext;
 ydata=udatain(ystr,missc,dnobs);
 ytran=ydata;    @ Note ... data are already in first differences (detrended) @ 
 s[.,imark]=ytran;
imark=imark+1; endo;

/* Carry Out Analysis Period by Period */
                            

@ Misc Matrices used in calculations @
maxlag=maxc(ownlag|othlag);
nreg=ns*(ownlag+(ns-1)*othlag);  @ Number of Regressors @ 
nregvec=(ownlag+(ns-1)*othlag)*ones(ns,1);  @ Vector with number of regressors in each equation@
step=pi/nord;
wvec=seqa(step,step,nord); 

@ Matrices for Saving Results @
i=1; do while i <= ns;
 str="spectot_" $+ ftocv(i,1,0);
 tmp=miss(zeros(dnobs,nord),0);
 yy=varput(tmp,str);
 str="specfac_" $+ ftocv(i,1,0);
 tmp=miss(zeros(dnobs,nord),0);
 yy=varput(tmp,str); 
 str="specspill_" $+ ftocv(i,1,0);
 tmp=miss(zeros(dnobs,nord),0);
 yy=varput(tmp,str);
 str="specown_" $+ ftocv(i,1,0);
 tmp=miss(zeros(dnobs,nord),0);
 yy=varput(tmp,str);
i=i+1; endo;

@ Construct sequence of discounts factors @
dvec=seqm(1.0,disc,dnobs);

ifirst=1;

n=nfirst; do while n <= nlast;
 print /flush;
 calvec[n];;timestr(time);
 j1=dnobs-n+1;
 dn=rev(dvec[2:n])|dvec[1:j1];
 
 @ Construct X Matrix -- Using lags of other series ... unrestricted @
 xt=miss(zeros(dnobs,nreg),0);
 i=1; do while i <= ns;
  ii=(i-1)*(ownlag+(ns-1)*othlag);
  j=1; do while j <= ownlag;
   xt[j+1:dnobs,ii+j]=s[1:dnobs-j,i];
  j=j+1; endo;
  ii=ii+ownlag;
  ik=1; do while ik <= ns;
   if ik ./= i;
    j=1; do while j <= othlag;
     xt[j+1:dnobs,ii+j]=s[1:dnobs-j,ik];
    j=j+1; endo;
    ii=ii+othlag;
   endif;
  ik=ik+1; endo;
 i=i+1; endo;

 
 @ Choose Observations @
 tmp=packr(s~xt~dn);
 yt=tmp[.,1:ns];
 xt=tmp[.,ns+1:cols(tmp)-1];
 dnt=tmp[.,cols(tmp)];
 dnt=dnt/meanc(dnt);
 
 @ Construct GLS Estimates of Regression Coefficients @
  nt=rows(yt);  @ Number of time periods @
  ny=cols(yt);  @ Number of equations @
  nr=cols(xt);  @ Total Number of regressors @
  
  @ Step 1: Form y and x matrix for stacked system @
  yt=yt.*dnt;
  xt=xt.*dnt;
  y=vec(yt);
  x=zeros(nt*ny,nr);
  jj=0;
  i=1; do while i <= ny;
   ii=(i-1)*nt;
   x[ii+1:ii+nt,jj+1:jj+nregvec[i]]=xt[.,jj+1:jj+nregvec[i]];
   jj=jj+nregvec[i];
  i=i+1; endo;
  
  bols=invpd(x'x)*(x'y);
  e=y-x*bols;
  u=(reshape(e,ny,nt))';
  seps=u'u/nt;
  sepsinv=invpd(seps);
  q=sepsinv.*.eye(nt);
  bgls=(invpd(x'q*x))*(x'q*y);
  e=y-x*bgls;
  u=(reshape(e,ny,nt))';
  
  e=u;  @ Change notation for use in EM @
  ee=e'e;
  seps=(e'e)/(rows(e));
  seps_inv=invpd(seps);
  det_seps=det(seps);
  tmp=seps_inv*ee;
  un_lf=-0.5*(rows(e)*ln(det_seps) + sumc(diag(tmp))); @ Unrestricted log-likelihood @ 
  
  @ Initialize for EM @
  if ifirst .== 1;
    @ initial values @
    vuuvec = diag(seps)/sqrt(2);
    vuu=diagrv(eye(ns),vuuvec);
    lam=sqrt(vuuvec).*hvec;
    vff=eye(cols(hvec));
    nem=nem1;
    ifirst=0;
  else;
    nem=nem2;
  endif;

  
  @ EM Iterations @

  irep=1; do while irep <= nem;
   vee=lam*vff*lam' + vuu;
   vee_i=invpd(vee);
   det_vee=det(vee);
   if irep .== nem;
    tmp=vee_i*ee;
    lf=-0.5*(rows(e)*ln(det_vee) + sumc(diag(tmp)));
   endif;

   @ Regression Coefficients @

   psi=vff*lam'invpd(vee);
   vff_e=vff-psi*lam*vff;
   fhat=e*psi';
 
   @ Compute Sufficient statistics given e @
   ef=e'fhat;
   ff=fhat'fhat+vff_e*rows(fhat);
 
   @ Construct new estimate of lambda @
   i=1; do while i <= rows(hvec);
    nfm=sumc(hvec[i,.]');
    xxy=zeros(nfm,1);
    xx=zeros(nfm,nfm);
    jx=0;
    j=1; do while j <= cols(hvec);
     if hvec[i,j] .== 1;
      jx=jx+1;
      xxy[jx,1]=ef[i,j];
      kx=0;
      k=1; do while k <= cols(hvec);
       if hvec[i,k] .== 1;
        kx=kx+1;
        xx[jx,kx]=ff[j,k];
       endif;
      k=k+1; endo;
     endif;
    j=j+1; endo;
    lam_i=invpd(xx)*xxy;
    tmp=ee[i,i]-xxy'lam_i;
    vuu[i,i]=tmp/rows(e);
    jx=0;
    j=1; do while j <= cols(hvec);
     if hvec[i,j] .== 1;
      jx=jx+1;
      lam[i,j]=lam_i[jx];
     endif;
    j=j+1; endo;
   i=i+1; endo;
  irep=irep+1; endo;
  calvec[n];
  "Unrestricted Log Likelihood";;un_lf;
  "Restricted Log Likelihood";;lf;
  df_unr=(ns*(ns+1))/2;
  df_res=(sumc(sumc(hvec)) + ns);
  df=df_unr-df_res;
  "Degrees of Freedom";;df;
  lrstat=2*(un_lf-lf);
  pvalue=cdfchic(lrstat,df);
  "LR Stat and Pvalue";;lrstat;;pvalue;
  "Factor Loadings";
  lam;
  "Uniquess SD";
  (sqrt(diag(vuu)));
  "";"";
  
  @ ... Write in standard form ... 
        Each column shows regression coefficients for 1 equation    @
  beta=zeros(ns*maxlag,ns);
  nre=ownlag+(ns-1)*othlag;
  i=1; do while i <= ns;
   ii=(i-1)*nre;
   bcoef=bgls[ii+1:ii+nre];
   j=1; do while j <= ownlag;
    jj=(j-1)*ns;
    beta[jj+i,i]=bcoef[j];
   j=j+1; endo;
   ii=ownlag;
   j=1; do while j <= othlag;
    jj=(j-1)*ns;
    ik=0;
    k=1; do while k <= ns;
     if k ./= i;
      mm=ownlag+ik*othlag;
      beta[jj+k,i]=bcoef[mm+j];
      ik=ik+1;
     endif;
    k=k+1; endo;
   j=j+1; endo;
  i=i+1; endo;  
  
 @ ---- Calculate Companion Matrix ---- @
 b=beta';
 comp=zeros(cols(b),cols(b));
 comp[1:rows(b),.]=b;
 if cols(b) .> rows(b);
  comp[rows(b)+1:rows(comp),1:cols(comp)-rows(b)]=eye(cols(comp)-rows(b));
 endif;
 @ -- Write Model in SS Form --
     y(t) = Q*z(t)
     z(t) = M*z(t-1) + G*u(t)
     var(u(t)) = I
 @
 m=comp;
 q=zeros(ns,rows(m));
 q[1:ns,1:ns]=eye(ns);
 g=zeros(cols(m),nf+ns);
 g[1:ns,1:nf]=lam;
 g[1:ns,nf+1:nf+ns]=sqrt(vuu);


 @ Calculate Spectral Density Matrix of this VAR --- @ 
   @ .. All Shocks ... Total Spectrum ... @
   tmp=ns*(ns+1)/2;
   svlevtot=zeros(tmp,nord);
   j=1; do while j<= nord;
    w=wvec[j];
    spdif=spmodh(q,m,g,w);  @ Spectrum of VAR @
    @ Convert to Spectrum of Levels @
    let im = 0+1i;
    z=exp(-w*im);az=1-z;  @ az is first difference filter @
    azi=inv(az);          @ azi is the accumulation operator @
    a=azi*azi';
    splev=a*spdif;
    svlevtot[.,j]=vech(splev);
   j=j+1; endo;
         
   @ ... Shock by Shock ... @
   ishock=1; do while ishock <= cols(g);
    g1=g[.,ishock];
    tmp=ns*(ns+1)/2;
    svlev=zeros(tmp,nord);
    j=1; do while j<= nord;
     w=wvec[j];
     spdif=spmodh(q,m,g1,w);  @ Spectrum of VAR @
     @ Convert to Spectrum of Levels @
     let im = 0+1i;
     z=exp(-w*im);az=1-z;  @ az is first difference filter @
     azi=inv(az);          @ azi is the accumulation operator @
     a=azi*azi';
     splev=a*spdif;
     svlev[.,j]=vech(splev);
    j=j+1; endo;
    str="svlev_" $+ ftocv(ishock,2,0);
    yy=varput(svlev,str);
   ishock=ishock+1; endo; 
   
   i=1; do while i <= ns;
    ii=i*(i+1)/2;
    rslev=real(svlevtot);        @ Real part of spectrum @  
    str="spectot_" $+ ftocv(i,1,0);
    tmp=varget(str);
    tmp[n,.]=rslev[ii,.];
    yy=varput(tmp,str);
    
    
    fi=1; do while fi <= nf;
     str="svlev_" $+ ftocv(fi,2,0); 
     tmp=varget(str);
     tmp=real(tmp);
     if fi .== 1;
      tmp1=tmp;
     else;
      tmp1=tmp1+tmp;
     endif;
     str="specfac_" $+ ftocv(i,1,0);
     tmp=varget(str);
     tmp[n,.]=tmp1[ii,.];
     yy=varput(tmp,str);     
    fi=fi+1; endo;

    str="svlev_" $+ ftocv(nf+i,2,0); 
    tmp1=varget(str);
    tmp1=real(tmp1);
    str="specown_" $+ ftocv(i,1,0);
    tmp=varget(str);
    tmp[n,.]=tmp1[ii,.];
    yy=varput(tmp,str);
    
    str="spectot_" $+ ftocv(i,1,0); 
    svtot=varget(str); 
    str="specfac_" $+ ftocv(i,1,0); 
    svfac=varget(str); 
    str="specown_" $+ ftocv(i,1,0); 
    svown=varget(str); 
    str="specspill_" $+ ftocv(i,1,0);
    tmp=varget(str);
    tmp[n,.]=svtot[n,.]-svfac[n,.]-svown[n,.];
    yy=varput(tmp,str); 
   
   i=i+1; endo;   
  
n=n+1; endo;

@ Save Results @
save path = ^savpath;
i=1; do while i <= ns;
 str="spectot_" $+ ftocv(i,1,0);
 tmp=varget(str);
 save ^str=tmp;
 str="specfac_" $+ ftocv(i,1,0);
 tmp=varget(str);
 save ^str=tmp;
 str="specspill_" $+ ftocv(i,1,0);
 tmp=varget(str);
 save ^str=tmp;
 str="specown_" $+ ftocv(i,1,0);
 tmp=varget(str);
 save ^str=tmp;
i=i+1; endo;

output off;
