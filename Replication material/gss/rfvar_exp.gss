/*
    rfvar_exp.gss, 5/4/03, mww
    Compute descriptive statistics from VAR
    VAR uses unrestricted versions "other series" in equations
    VAR coefficients are estimated by GLS
*/
new;
library pgraph;
graphset;
outwidth 200;
ofile="rfvar_exp.out";  @ Output File Name @
iext="q50";            @ Data Extension -- input @
nfy=1950;              @ First Year @
nfp=1;                 @ First Period of Year @
nly=2002;              @ Last Year @
nlp=4;                 @ Last Period of Year @
nper=4;                       @ Number of Periods Per Year @
dpath="c:\\g7\\data\\";       @ Data Path @
savpath="c:\\g7\\gss\\fmt\\"; @ Save Path @
missc=1.0e+032;        @ Missing Value Code in ASCII Files @
othlag=1;              @ Number of other lags in VAR @
ownlag=4;              @ number of own lags in VAR @

nord=100;              @ Number of Ordinates for spectral calculation @
nperl=6;               @ Lower cutoff for bandpass @
nperu=32;              @ Upper cutoff for bandpass @
disc=0.97;             @ discount factor @

efy=1965;              @ First Year for estimation @
efp=1;                 @ First Period for estimation @
ely=1995;              @ Last Year for estimation @
elp=4;                 @ Last Period for estimation @

small=1.0e-06;

dnobs=nper*(nly-nfy-1)+nlp+(nper+1-nfp);        @ - Number of Obs, data - @
calvec=seqa(nfy+(nfp-1)/nper,1/nper,dnobs);     @ -- Calendar Vector -- @
nfirst=nper*(efy-nfy-1)+efp+(nper+1-nfp);       @ -- index of first estimation period -- @
nlast=nper*(ely-nfy-1)+elp+(nper+1-nfp);        @ -- index of last estimation period -- @

load path = ^dpath;

#include fcst.prc;
#include udatain.prc;
#include spmodh.prc;

cname=
"cn" $|
"fr" $|
"bd" $|
"it" $|
"jp" $|
"uk" $|
"us" ;

ns=rows(cname);  @ Number of Series @

output file = ^ofile reset; output on;
outwidth 200;
format /ro 16,6;

@ .. Read in Series @
s=miss(zeros(dnobs,ns),0);
imark=1; do while imark <= ns;
 ystr="" $+ cname[imark,1] $+ "gdppc_sm." $+ iext;
 ydata=udatain(ystr,missc,dnobs);
 ytran=ydata;    @ Note ... data are already in first differences (detrended) @ 
 s[.,imark]=ytran;
imark=imark+1; endo;


/* Carry Out Analysis Period by Period */

@ Matrices for Saving Results @
bpsd=miss(zeros(dnobs,ns),0);               @ BP Standard Deviations @
bpcoh=miss(zeros(dnobs,ns*(ns+1)/2),0);     @ Average Coherence @
bpcor=miss(zeros(dnobs,ns*(ns+1)/2),0);     @ BP Correlation @


@ Misc Matrices used in calculations @
maxlag=maxc(ownlag|othlag);
step=pi/nord;
wvec=seqa(step,step,nord); 
nreg=ns*(ownlag+(ns-1)*othlag);  @ Number of Regressors @ 
nregvec=(ownlag+(ns-1)*othlag)*ones(ns,1);  @ Vector with number of regressors in each equation@
nfl=2*pi/nperl;
nfu=2*pi/nperu;
ibc =(wvec .<= nfl).*(wvec .>= nfu);


@ Construct sequence of discounts factors @
dvec=seqm(1.0,disc,dnobs);

n=nfirst; do while n <= nlast;
 print /flush;
 calvec[n];;timestr(time);
 j1=dnobs-n+1;
 dn=rev(dvec[2:n])|dvec[1:j1];
 
 @ Construct X Matrix -- Using lags of other series ... unrestricted @
 xt=miss(zeros(dnobs,nreg),0);
 i=1; do while i <= ns;
  ii=(i-1)*(ownlag+(ns-1)*othlag);
  j=1; do while j <= ownlag;
   xt[j+1:dnobs,ii+j]=s[1:dnobs-j,i];
  j=j+1; endo;
  ii=ii+ownlag;
  ik=1; do while ik <= ns;
   if ik ./= i;
    j=1; do while j <= othlag;
     xt[j+1:dnobs,ii+j]=s[1:dnobs-j,ik];
    j=j+1; endo;
    ii=ii+othlag;
   endif;
  ik=ik+1; endo;
 i=i+1; endo;

 
 @ Choose Observations @
 tmp=packr(s~xt~dn);
 yt=tmp[.,1:ns];
 xt=tmp[.,ns+1:cols(tmp)-1];
 dnt=tmp[.,cols(tmp)];
 dnt=dnt/meanc(dnt);
 
 @ Construct GLS Estimates of Regression Coefficients @
  nt=rows(yt);  @ Number of time periods @
  ny=cols(yt);  @ Number of equations @
  nr=cols(xt);  @ Total Number of regressors @
  
  @ Step 1: Form y and x matrix for stacked system @
  yt=yt.*dnt;
  xt=xt.*dnt;
  y=vec(yt);
  x=zeros(nt*ny,nr);
  jj=0;
  i=1; do while i <= ny;
   ii=(i-1)*nt;
   x[ii+1:ii+nt,jj+1:jj+nregvec[i]]=xt[.,jj+1:jj+nregvec[i]];
   jj=jj+nregvec[i];
  i=i+1; endo;
  
  bols=invpd(x'x)*(x'y);
  e=y-x*bols;
  u=(reshape(e,ny,nt))';
  seps=u'u/nt;
  sepsinv=invpd(seps);
  q=sepsinv.*.eye(nt);
  bgls=(invpd(x'q*x))*(x'q*y);
  e=y-x*bgls;
  u=(reshape(e,ny,nt))';
  seps=u'u/nt;
  
  @ ... Write in standard form ... solving out constraint on weights
        Each column shows regression coefficients for 1 equation    @
  beta=zeros(ns*maxlag,ns);
  nre=ownlag+(ns-1)*othlag;
  i=1; do while i <= ns;
   ii=(i-1)*nre;
   bcoef=bgls[ii+1:ii+nre];
   j=1; do while j <= ownlag;
    jj=(j-1)*ns;
    beta[jj+i,i]=bcoef[j];
   j=j+1; endo;
   ii=ownlag;
   j=1; do while j <= othlag;
    jj=(j-1)*ns;
    ik=0;
    k=1; do while k <= ns;
     if k ./= i;
      mm=ownlag+ik*othlag;
      beta[jj+k,i]=bcoef[mm+j];
      ik=ik+1;
     endif;
    k=k+1; endo;
   j=j+1; endo;
  i=i+1; endo;
   
 @ ---- Calculate Companion Matrix ---- @
 b=beta';
 comp=zeros(cols(b),cols(b));
 comp[1:rows(b),.]=b;
 if cols(b) .> rows(b);
  comp[rows(b)+1:rows(comp),1:cols(comp)-rows(b)]=eye(cols(comp)-rows(b));
 endif;
 @ -- Write Model in SS Form --
     y(t) = Q*z(t)
     z(t) = M*z(t-1) + G*u(t)
     var(u(t)) = I
 @
 m=comp;
 q=zeros(ns,rows(m));
 q[1:ns,1:ns]=eye(ns);
 g=zeros(cols(m),ns);
 g[1:ns,1:ns]=(chol(seps))';

 @ Calculate Spectral Density Matrix of this VAR --- @
   tmp=ns*(ns+1)/2;
   svdatlev=zeros(tmp,nord);
   svdatdif=zeros(tmp,nord);
   j=1; do while j<= nord;
    w=wvec[j];
    spdif=spmodh(q,m,g,w);  @ Spectrum of VAR @
    @ Convert to Spectrum of Levels @
    let im = 0+1i;
    z=exp(-w*im);az=1-z;  @ az is first difference filter @
    azi=inv(az);          @ azi is the accumulation operator @
    a=azi*azi';
    splev=a*spdif;
    svdatlev[.,j]=vech(splev);
    svdatdif[.,j]=vech(spdif);
   j=j+1; endo;
   
   @ Note: Variance of Series is given by average value over all ordinates  @
   asvlev=abs(svdatlev');         @ Absolute value of Spectrum @  
   abpbc=selif(asvlev,ibc);       @ Over Relevant Frequencies @
   rsvlev=real(svdatlev');        @ Real part of spectrum @  
   rbpbc=selif(rsvlev,ibc);       @ Over Relevant Frequencies @
   
   i=1; do while i <= ns;
    ii=i*(i+1)/2;
    bpsd[n,i]=sqrt(sumc(rbpbc[.,ii])/nord);
   i=i+1; endo;
   i=1; do while i <= ns;
    j=1; do while j <= i;
     ii=i*(i+1)/2;
     jj=j*(j+1)/2;
     i1=i*(i-1)/2;
     cspec=(abpbc[.,i1+j].^2)./(abpbc[.,ii].*abpbc[.,jj]);
     bpcoh[n,i1+j]=meanc(sqrt(cspec));   
     bpcor[n,i1+j]=(sumc(rbpbc[.,i1+j])/nord)/(bpsd[n,i]*bpsd[n,j]);
    j=j+1; endo;
   i=i+1; endo;
  
 skip:
n=n+1; endo;

@ Save Results @
save path = ^savpath;
str="bpsd_exp";
tmp=calvec~100*bpsd;
save ^str=tmp;
str="bpcoh_exp";
tmp=calvec~bpcoh;
save ^str=tmp;
str="bpcor_exp";
tmp=calvec~bpcor;
save ^str=tmp;

